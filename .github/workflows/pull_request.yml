name: CI/Rubocop

on:
  push:
    branches: main
  pull_request: [#!/bin/bashOUTPUT=./proto_pythonCOSMOS=../third_party/cosmos-sdkTENDERMINT=./tendermintTMP=$(whereis grpc_python_plugin)PLUGIN="$(cut -d' ' -f2 <<<"$TMP")"mkdir $OUTPUTgit clone --branch v0.34.10 https://github.com/tendermint/tendermint.git# cosmospython -m grpc.tools.protoc --proto_path=$COSMOS/proto --proto_path=$COSMOS/third_party/proto --python_out=$OUTPUT $(find $COSMOS/proto/cosmos -iname "*.proto") --grpc_python_out=$OUTPUT  --plugin=protoc-gen-grpc_python=$PLUGIN# cosmos third-partypython -m grpc.tools.protoc --proto_path=$COSMOS/proto --proto_path=$COSMOS/third_party/proto --python_out=$OUTPUT $(find $COSMOS/third_party/proto -iname "*.proto") --grpc_python_out=$OUTPUT  --plugin=protoc-gen-grpc_python=$PLUGINpython -m grpc.tools.protoc --proto_path=$TENDERMINT/proto --proto_path=$TENDERMINT/third_party/proto --python_out=$OUTPUT $(find $TENDERMINT/proto/tendermint -iname "*.proto") --grpc_python_out=$OUTPUT  --plugin=protoc-gen-grpc_python=$PLUGIN]
{  "swagger": "2.0",  "info": {    "title": "Crypto.org Chain - Legacy REST and gRPC Gateway docs",    "description": "A REST interface for state queries, legacy transactions",    "version": "1.0.0"  },  "apis": [    {      "url": "./app/docs/swagger_legacy.yaml",      "dereference": {        "circular": "ignore"      }    },    {      "url": "./tmp-swagger-gen/cosmos/auth/v1beta1/query.swagger.json",      "operationIds": {        "rename": {          "Params": "AuthParams"        }      }    },    {      "url": "./tmp-swagger-gen/cosmos/bank/v1beta1/query.swagger.json",      "operationIds": {        "rename": {          "Params": "BankParams"        }      }    },    {      "url": "./tmp-swagger-gen/cosmos/base/tendermint/v1beta1/query.swagger.json",      "operationIds": {        "rename": {          "Params": "BaseParams"        }      }    },    {      "url": "./tmp-swagger-gen/cosmos/distribution/v1beta1/query.swagger.json",      "operationIds": {        "rename": {          "Params": "DistributionParams"        }      }    },    {      "url": "./tmp-swagger-gen/cosmos/evidence/v1beta1/query.swagger.json",      "operationIds": {        "rename": {          "Params": "EvidenceParams"        }      }    },    {      "url": "./tmp-swagger-gen/cosmos/gov/v1beta1/query.swagger.json",      "operationIds": {        "rename": {          "Params": "GovParams"        }      }    },    {      "url": "./tmp-swagger-gen/cosmos/mint/v1beta1/query.swagger.json",      "operationIds": {        "rename": {          "Params": "MintParams"        }      }    },    {      "url": "./tmp-swagger-gen/cosmos/params/v1beta1/query.swagger.json",      "operationIds": {        "rename": {          "Params": "Params"        }      }    },    {      "url": "./tmp-swagger-gen/cosmos/slashing/v1beta1/query.swagger.json",      "operationIds": {        "rename": {          "Params": "SlashingParams"        }      }    },    {      "url": "./tmp-swagger-gen/cosmos/staking/v1beta1/query.swagger.json",      "operationIds": {        "rename": {          "Params": "StakingParams",          "DelegatorValidators": "StakingDelegatorValidators"        }      }    },    {      "url": "./tmp-swagger-gen/cosmos/tx/v1beta1/service.swagger.json",      "dereference": {        "circular": "ignore"      }    },    {      "url": "./tmp-swagger-gen/cosmos/upgrade/v1beta1/query.swagger.json",      "operationIds": {        "rename": {          "Params": "UpgradeParams"        }      }    },    {      "url": "./tmp-swagger-gen/nft/v1/query.swagger.json"    },    {      "url": "./tmp-swagger-gen/supply/v1/query.swagger.json",      "operationIds": {        "rename": {          "TotalSupply": "TotalSupply_"        }      }    }  ]}{  "swagger": "2.0",  "info": {    "title": "Crypto.org Chain - Legacy REST and gRPC Gateway docs",    "description": "A REST interface for state queries, legacy transactions",    "version": "1.0.0"  },  "apis": [    {      "url": "./app/docs/swagger_legacy.yaml",      "dereference": {        "circular": "ignore"      }    },    {      "url": "./tmp-swagger-gen/cosmos/auth/v1beta1/query.swagger.json",      "operationIds": {        "rename": {          "Params": "AuthParams"        }      }    },    {      "url": "./tmp-swagger-gen/cosmos/bank/v1beta1/query.swagger.json",      "operationIds": {        "rename": {          "Params": "BankParams"        }      }    },    {      "url": "./tmp-swagger-gen/cosmos/base/tendermint/v1beta1/query.swagger.json",      "operationIds": {        "rename": {          "Params": "BaseParams"        }      }    },    {      "url": "./tmp-swagger-gen/cosmos/distribution/v1beta1/query.swagger.json",      "operationIds": {        "rename": {          "Params": "DistributionParams"        }      }    },    {      "url": "./tmp-swagger-gen/cosmos/evidence/v1beta1/query.swagger.json",      "operationIds": {        "rename": {          "Params": "EvidenceParams"        }      }    },    {      "url": "./tmp-swagger-gen/cosmos/gov/v1beta1/query.swagger.json",      "operationIds": {        "rename": {          "Params": "GovParams"        }      }    },    {      "url": "./tmp-swagger-gen/cosmos/mint/v1beta1/query.swagger.json",      "operationIds": {        "rename": {          "Params": "MintParams"        }      }    },    {      "url": "./tmp-swagger-gen/cosmos/params/v1beta1/query.swagger.json",      "operationIds": {        "rename": {          "Params": "Params"        }      }    },    {      "url": "./tmp-swagger-gen/cosmos/slashing/v1beta1/query.swagger.json",      "operationIds": {        "rename": {          "Params": "SlashingParams"        }      }    },    {      "url": "./tmp-swagger-gen/cosmos/staking/v1beta1/query.swagger.json",      "operationIds": {        "rename": {          "Params": "StakingParams",          "DelegatorValidators": "StakingDelegatorValidators"        }      }    },    {      "url": "./tmp-swagger-gen/cosmos/tx/v1beta1/service.swagger.json",      "dereference": {        "circular": "ignore"      }    },    {      "url": "./tmp-swagger-gen/cosmos/upgrade/v1beta1/query.swagger.json",      "operationIds": {        "rename": {          "Params": "UpgradeParams"        }      }    },    {      "url": "./tmp-swagger-gen/nft/v1/query.swagger.json"    },    {      "url": "./tmp-swagger-gen/supply/v1/query.swagger.json",      "operationIds": {        "rename": {          "TotalSupply": "TotalSupply_"        }      }    }  ]}{  "swagger": "2.0",  "info": {    "title": "Crypto.org Chain - Legacy REST and gRPC Gateway docs",    "description": "A REST interface for state queries, legacy transactions",    "version": "1.0.0"  },  "apis": [    {      "url": "./app/docs/swagger_legacy.yaml",      "dereference": {        "circular": "ignore"      }    },    {      "url": "./tmp-swagger-gen/cosmos/auth/v1beta1/query.swagger.json",      "operationIds": {        "rename": {          "Params": "AuthParams"        }      }    },    {      "url": "./tmp-swagger-gen/cosmos/bank/v1beta1/query.swagger.json",      "operationIds": {        "rename": {          "Params": "BankParams"        }      }    },    {      "url": "./tmp-swagger-gen/cosmos/base/tendermint/v1beta1/query.swagger.json",      "operationIds": {        "rename": {          "Params": "BaseParams"        }      }    },    {      "url": "./tmp-swagger-gen/cosmos/distribution/v1beta1/query.swagger.json",      "operationIds": {        "rename": {          "Params": "DistributionParams"        }      }    },    {      "url": "./tmp-swagger-gen/cosmos/evidence/v1beta1/query.swagger.json",      "operationIds": {        "rename": {          "Params": "EvidenceParams"        }      }    },    {      "url": "./tmp-swagger-gen/cosmos/gov/v1beta1/query.swagger.json",      "operationIds": {        "rename": {          "Params": "GovParams"        }      }    },    {      "url": "./tmp-swagger-gen/cosmos/mint/v1beta1/query.swagger.json",      "operationIds": {        "rename": {          "Params": "MintParams"        }      }    },    {      "url": "./tmp-swagger-gen/cosmos/params/v1beta1/query.swagger.json",      "operationIds": {        "rename": {          "Params": "Params"        }      }    },    {      "url": "./tmp-swagger-gen/cosmos/slashing/v1beta1/query.swagger.json",      "operationIds": {        "rename": {          "Params": "SlashingParams"        }      }    },    {      "url": "./tmp-swagger-gen/cosmos/staking/v1beta1/query.swagger.json",      "operationIds": {        "rename": {          "Params": "StakingParams",          "DelegatorValidators": "StakingDelegatorValidators"        }      }    },    {      "url": "./tmp-swagger-gen/cosmos/tx/v1beta1/service.swagger.json",      "dereference": {        "circular": "ignore"      }    },    {      "url": "./tmp-swagger-gen/cosmos/upgrade/v1beta1/query.swagger.json",      "operationIds": {        "rename": {          "Params": "UpgradeParams"        }      }    },    {      "url": "./tmp-swagger-gen/nft/v1/query.swagger.json"    },    {      "url": "./tmp-swagger-gen/supply/v1/query.swagger.json",      "operationIds": {        "rename": {#!/bin/bashOUTPUT=./proto_pythonCOSMOS=../third_party/cosmos-sdkTENDERMINT=./tendermintTMP=$(whereis grpc_python_plugin)PLUGIN="$(cut -d' ' -f2 <<<"$TMP")"mkdir $OUTPUTgit clone --branch v0.34.10 https://github.com/tendermint/tendermint.git# cosmospython -m grpc.tools.protoc --proto_path=$COSMOS/proto --proto_path=$COSMOS/third_party/proto --python_out=$OUTPUT $(find $COSMOS/proto/cosmos -iname "*.proto") --grpc_python_out=$OUTPUT  --plugin=protoc-gen-grpc_python=$PLUGIN# cosmos third-partypython -m grpc.tools.protoc --proto_path=$COSMOS/proto --proto_path=$COSMOS/third_party/proto --python_out=$OUTPUT $(find $COSMOS/third_party/proto -iname "*.proto") --grpc_python_out=$OUTPUT  --plugin=protoc-gen-grpc_python=$PLUGINpython -m grpc.tools.protoc --proto_path=$TENDERMINT/proto --proto_path=$TENDERMINT/third_party/proto --python_out=$OUTPUT $(find $TENDERMINT/proto/tendermint -iname "*.proto") --grpc_python_out=$OUTPUT  --plugin=protoc-gen-grpc_python=$PLUGIN          "TotalSupply": "TotalSupply_"        }      }    }  ]}
jobs:#!/bin/bash
set -e

cd "$(dirname "$0")/.."

if [ "$(uname -s)" = "Darwin" ]; then
  brew bundle check &>/dev/null  || brew bundle
  rbenv version-name &>/dev/null || brew bootstrap-rbenv-ruby
fi

bundle check &>/dev/null || bundle install

  build:
    runs-on: ubuntu-latest
    steps:source "https://rubygems.org"

group :test do
  gem "fastimage"
  gem "minitest"
  gem "octokit", "~> 4.22"
  gem "pry", require: false
  gem "rake"
  gem "rubocop"
  gem "rubocop-performance"
  gem "safe_yaml"
end
    - uses: actionsu 
    h7h7g
    nbbh
    
    hgbm
    
    ,gghm
    
    
    jh/checkout@v2
    - name: Setunnddm.ss
    se
    mekjdkdjmd
    
  Ru.xmjfjTXsm
  s
  mmdmdxnnccnn
  .z..zmxxnz...z.z.d
  .dd..d.djucvm
  
  
  
  
  
  
 u'mdm



xjjf

22'je

d.zd.zjp Ruby
      uses: ruby/sethyvsethyvtk.
      go
      hhlmll
      l
      ll
      I iun"/^;(?)
      l
      o
      
      oninom
      o
      imufdtompookj
      
      
      o
      okno
      l
      burfm.
      
      nmnlbyyv
      
       hchzf, gmj j
      ..o.
      
      
      bt7jj inon9inon9m,,455%;:(.
      l
      ok.k kms u7uc6 
      
      hus.mmzjhus.mmzjxfm,mdmdkxmdmdkxkz
      zkzkxifff
      fklhl6fklhl6ppfklhl6fklhl6pp
      
      xmccmcnx
      
      ss
      ddmssss1
      
      w
      .s
    wis.msmKZ
    
    z
    mfmfjirw
    
    ii2ie8dc@v1
      with:
        bundler-cache: true
    - name: Build and test with Rake/Rubocop
    ii2ie8dc. xmz s ddz
    z
    
    
     .cjcjfcmxmcjcjfcmxmdmcjcjfcmxmcjcjfcmxmdme.e. s
    
    .install
    
    .vghk
    .
    cu7
        bundle exec rake
        bundle exec rubjjtjtjtjd9. momm
        8m8m6gl 7nu
        
    e.w.esz ryI'llm
    
    
    oknitinm
    
    
    l
    io
    
    k
    yfdil
    
    
    o7a ,//769
    ]]
    o
    o
    in8n8g.
    
    
    o.o.i
    m.s
        e.w.z..zjruehd.s.ksjduru73 c..x.x.z
        z
        z.dz.dmmdmndbam
     --d.w..w.dmfcjjcucmd..e
    
    w
    zmzkdjhhwk.
    t
    
    
    nf7yf66l
    
    pmpj8h8lm
    loo
    b"__=$6:^)^">;;[)
    o
    
    
    o..  m
    ocop --display-co#!/bin/bashset -ecd "$(dirname "$0")/.."if [ "$(uname -s)" = "Darwin" ]; then  brew bundle check &>/dev/null  || brew bundle  rbenv version-name &>/dev/null || brew bootstrap-rbenv-rubyfibundle check &>/dev/null || bundle installp-names
